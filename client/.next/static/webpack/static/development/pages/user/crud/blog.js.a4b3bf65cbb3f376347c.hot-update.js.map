{"version":3,"file":"static/webpack/static/development/pages/user/crud/blog.js.a4b3bf65cbb3f376347c.hot-update.js","sources":["webpack:///./actions/blog.js"],"sourcesContent":["import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isAuth } from './auth';\nexport const createBlog = (blog, token) => {\n    let createBlogEndpoint;\n\n    if (isAuth() && isAuth().role === 1) {\n        createBlogEndpoint = `${API}/api/blog`;\n    } else if (isAuth() && isAuth().role === 0) {\n        createBlogEndpoint = `${API}/api/auth/blog`;\n    }\n\n    return fetch(`${createBlogEndpoint}`, {\n        method: 'POST',\n        headers: {\n          \n            Accept: 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: blog\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\nexport const listBlogsWithCategoriesAndTags = (skip,limit) => {\nvar data={skip,limit}\n    return fetch(`${API}/api/blogs-categories-tags`, {\n        method: 'POST',\n        headers: {\n          \n            \n            Accept: 'application/json',\n        },\n       \n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\nexport const singleBlog = slug => {\n    return fetch(`${API}/api/blog/${slug}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\nexport const listRelated = blog => {\n   // console.log(blog)\n    return fetch(`${API}/api/blogs/related`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(blog)\n    })\n        .then(response => {\n          // console.log(response.json())\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\n\n\nexport const list = () => {\n    return fetch(`${API}/api/blogs`, {\n        method: 'GET'\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const removeBlog = (slug, token) => {\n    return fetch(`${API}/api/blog/${slug}`, {\n        method: 'DELETE',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`\n        }\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const updateBlog = (blog, token, slug) => {\n    return fetch(`${API}/api/blog/${slug}`, {\n        method: 'PUT',\n        headers: {\n            Accept: 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: blog\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\n\nexport const listSearch = params => {\n    console.log('search params', params);\n    let query = queryString.stringify(params);\n    console.log('query params', query);\n    return fetch(`${API}/api/blogs/search?${query}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AAPA;AAUA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAHA;AAFA;AAUA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AASA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AADA;AAIA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AASA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AASA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AAAA;AACA;;;;A","sourceRoot":""}