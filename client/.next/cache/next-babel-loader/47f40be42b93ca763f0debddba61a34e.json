{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport cookie from 'js-cookie';\nimport { get } from 'mongoose';\nexport const preSignup = user => {\n  return fetch(`${API}/api/auth/pre-signup`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const signup = user => {\n  return fetch(`${API}/api/auth/signup`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  }).then(response => response.json()).catch(err => console.log(err));\n};\nexport const updateUser = (user, next) => {\n  if (false) {\n    if (localStorage.getItem('user')) {\n      let auth = JSON.parse(localStorage.getItem('user'));\n      auth = user;\n      localStorage.setItem('user', JSON.stringify(auth));\n      next();\n    }\n  }\n};\nexport const handleResponse = response => {\n  if (response.status === 401) {\n    signout(() => {\n      Router.push({\n        pathname: '/signin',\n        query: {\n          message: 'Your session is expired. Please signin'\n        }\n      });\n    });\n  }\n};\nexport const signin = user => {\n  return fetch(`${API}/api/auth/signin`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  }).then(response => response.json()).catch(err => console.log(err));\n};\nexport const setCookie = (key, value) => {\n  if (false) {\n    cookie.set(key, value, {\n      expires: 1\n    });\n  }\n};\nexport const removeCookie = key => {\n  if (false) {\n    cookie.remove(key, {\n      expires: 1\n    });\n  }\n};\nexport const getCookie = key => {\n  if (false) {\n    return cookie.get(key);\n  }\n};\nexport const setLocalStorage = (key, value) => {\n  if (false) {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n};\nexport const removeLocalStorage = key => {\n  if (false) {\n    localStorage.removeItem(key);\n  }\n};\nexport const authentication = (data, next) => {\n  console.log(data.user);\n  setCookie('token', data.token);\n  setLocalStorage('user', data.user);\n  next();\n};\nexport const signout = next => {\n  removeCookie('token');\n  removeLocalStorage('user');\n  next();\n  return fetch(`${API}/api/auth/signout`, {\n    method: \"GET\"\n  }).then(res => {\n    console.log(\"signout success\");\n  }).catch(err => console.log(err));\n};\nexport const isAuth = key => {\n  if (false) {\n    const cookieChecked = getCookie('token');\n\n    if (cookieChecked) {\n      if (localStorage.getItem('user')) {\n        return JSON.parse(localStorage.getItem('user'));\n      } else {\n        return false;\n      }\n    }\n  }\n};\nexport const forgotPassword = email => {\n  return fetch(`${API}/api/auth/forgot-password`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(email)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const resetPassword = resetInfo => {\n  return fetch(`${API}/api/auth/reset-password`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(resetInfo)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["/home/jahnvi/My stuff/SeoBlog/client/actions/auth.js"],"names":["fetch","API","cookie","get","preSignup","user","method","headers","Accept","body","JSON","stringify","then","response","json","catch","err","console","log","signup","updateUser","next","localStorage","getItem","auth","parse","setItem","handleResponse","status","signout","Router","push","pathname","query","message","signin","setCookie","key","value","set","expires","removeCookie","remove","getCookie","setLocalStorage","removeLocalStorage","removeItem","authentication","data","token","res","isAuth","cookieChecked","forgotPassword","email","resetPassword","resetInfo"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-fetch';\nimport {API} from '../config';\nimport cookie from 'js-cookie';\nimport { get } from 'mongoose';\nexport const preSignup = user => {\n    return fetch(`${API}/api/auth/pre-signup`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(user)\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const signup=(user)=>{\n   \n    return fetch(`${API}/api/auth/signup`,{\n        method:'POST',\n        headers:{\n            Accept:'application/json',\n            'Content-type':'application/json'\n        },\n        body:JSON.stringify(user)\n\n    })\n    .then(response=>response.json())\n    .catch(err=>console.log(err))\n};\nexport const updateUser = (user, next) => {\n    if (process.browser) {\n        if (localStorage.getItem('user')) {\n            let auth = JSON.parse(localStorage.getItem('user'));\n            auth = user;\n            localStorage.setItem('user', JSON.stringify(auth));\n            next();\n        }\n    }\n};\nexport const handleResponse = response => {\n    if (response.status === 401) {\n        signout(() => {\n            Router.push({\n                pathname: '/signin',\n                query: {\n                    message: 'Your session is expired. Please signin'\n                }\n            });\n        });\n    }\n};\nexport const signin=(user)=>{\n   \n    return fetch(`${API}/api/auth/signin`,{\n        method:'POST',\n        headers:{\n            Accept:'application/json',\n            'Content-type':'application/json'\n        },\n        body:JSON.stringify(user)\n\n    })\n \n    .then(response=>response.json())\n    .catch(err=>console.log(err))\n};\n\nexport const setCookie=(key,value)=>{\n    if(process.browser){\n\n        cookie.set(key,value,{expires:1})\n    }\n};\n\nexport const removeCookie=(key)=>{\n    if(process.browser){\n\n        cookie.remove(key,{expires:1})\n    }\n};\nexport const getCookie=(key)=>{\n    if(process.browser){\n\n     return   cookie.get(key)\n    }\n};\n\nexport const setLocalStorage=(key,value)=>{\n    if(process.browser){\n        localStorage.setItem(key,JSON.stringify(value))\n    }\n};\n\n\nexport const removeLocalStorage=(key)=>{\n    if(process.browser){\n        localStorage.removeItem(key)\n    }\n};\n\nexport const authentication=(data,next)=>{\n   console.log(data.user) \n   setCookie('token',data.token);\n   setLocalStorage('user',data.user);\n   next();\n};\n\nexport const signout=(next)=>{\nremoveCookie('token');\nremoveLocalStorage('user');\nnext()\nreturn fetch(`${API}/api/auth/signout`,{\n    method:\"GET\",\n\n})\n.then(res=>{console.log(\"signout success\")})\n.catch(err=>console.log(err))\n}\n\nexport const isAuth=(key)=>{\n    if(process.browser){\n      const cookieChecked=getCookie('token');\n      if(cookieChecked){\n          if(localStorage.getItem('user')){\n              return JSON.parse(localStorage.getItem('user'))\n          }\n          else{\n              return false;\n          }\n      }\n    }\n}\n\n\nexport const forgotPassword = email => {\n    return fetch(`${API}/api/auth/forgot-password`, {\n        method: 'PUT',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(email)\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const resetPassword = resetInfo => {\n    return fetch(`${API}/api/auth/reset-password`, {\n        method: 'PUT',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(resetInfo)\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};"]},"metadata":{},"sourceType":"module"}