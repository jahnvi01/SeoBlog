{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isAuth } from './auth';\nexport const createBlog = (blog, token) => {\n  let createBlogEndpoint;\n  console.log(isAuth().role);\n\n  if (isAuth() && isAuth().role === 1) {\n    createBlogEndpoint = `${API}/api/blog`;\n  } else if (isAuth() && isAuth().role === 0) {\n    createBlogEndpoint = `${API}/api/authuser/blog`;\n  }\n\n  return fetch(`${createBlogEndpoint}`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listBlogsWithCategoriesAndTags = (skip, limit) => {\n  var data = {\n    skip,\n    limit\n  };\n  return fetch(`${API}/api/blogs-categories-tags`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json'\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const singleBlog = slug => {\n  return fetch(`${API}/api/blog/${slug}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listRelated = blog => {\n  // console.log(blog)\n  return fetch(`${API}/api/blogs/related`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(blog)\n  }).then(response => {\n    // console.log(response.json())\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const list = username => {\n  let listBlogsEndpoint;\n\n  if (username) {\n    listBlogsEndpoint = `${API}/api/authuser/${username}/blogs`;\n  } else {\n    listBlogsEndpoint = `${API}/api/blogs`;\n  }\n\n  return fetch(`${listBlogsEndpoint}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const removeBlog = (slug, token) => {\n  let deleteBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    deleteBlogEndpoint = `${API}/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    deleteBlogEndpoint = `${API}/user/blog/${slug}`;\n  }\n\n  return fetch(`${deleteBlogEndpoint}`, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const updateBlog = (blog, token, slug) => {\n  let updateBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    updateBlogEndpoint = `${API}/api/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    updateBlogEndpoint = `${API}/api/authuser/blog/${slug}`;\n  }\n\n  return fetch(`${updateBlogEndpoint}`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listSearch = params => {\n  console.log('search params', params);\n  let query = queryString.stringify(params);\n  console.log('query params', query);\n  return fetch(`${API}/api/blogs/search?${query}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["/home/jahnvi/My stuff/SeoBlog/client/actions/blog.js"],"names":["fetch","API","queryString","isAuth","createBlog","blog","token","createBlogEndpoint","console","log","role","method","headers","Accept","Authorization","body","then","response","json","catch","err","listBlogsWithCategoriesAndTags","skip","limit","data","singleBlog","slug","listRelated","JSON","stringify","list","username","listBlogsEndpoint","removeBlog","deleteBlogEndpoint","updateBlog","updateBlogEndpoint","listSearch","params","query"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isAuth } from './auth';\nexport const createBlog = (blog, token) => {\n    let createBlogEndpoint;\nconsole.log(isAuth().role)\n    if (isAuth() && isAuth().role === 1) {\n        createBlogEndpoint = `${API}/api/blog`;\n    } else if (isAuth() && isAuth().role === 0) {\n        createBlogEndpoint = `${API}/api/authuser/blog`;\n    }\n\n    return fetch(`${createBlogEndpoint}`, {\n        method: 'POST',\n        headers: {\n          \n            Accept: 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: blog\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\nexport const listBlogsWithCategoriesAndTags = (skip,limit) => {\nvar data={skip,limit}\n    return fetch(`${API}/api/blogs-categories-tags`, {\n        method: 'POST',\n        headers: {\n          \n            \n            Accept: 'application/json',\n        },\n       \n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\nexport const singleBlog = slug => {\n    return fetch(`${API}/api/blog/${slug}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\nexport const listRelated = blog => {\n   // console.log(blog)\n    return fetch(`${API}/api/blogs/related`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(blog)\n    })\n        .then(response => {\n          // console.log(response.json())\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\n\n\n\nexport const list = username => {\n    let listBlogsEndpoint;\n\n    if (username) {\n        listBlogsEndpoint = `${API}/api/authuser/${username}/blogs`;\n    } else {\n        listBlogsEndpoint = `${API}/api/blogs`;\n    }\n\n    return fetch(`${listBlogsEndpoint}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\nexport const removeBlog = (slug, token) => {\n    let deleteBlogEndpoint;\n\n    if (isAuth() && isAuth().role === 1) {\n        deleteBlogEndpoint = `${API}/blog/${slug}`;\n    } else if (isAuth() && isAuth().role === 0) {\n        deleteBlogEndpoint = `${API}/user/blog/${slug}`;\n    }\n\n    return fetch(`${deleteBlogEndpoint}`, {\n        method: 'DELETE',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`\n        }\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\nexport const updateBlog = (blog, token, slug) => {\n    let updateBlogEndpoint;\n\n    if (isAuth() && isAuth().role === 1) {\n        updateBlogEndpoint = `${API}/api/blog/${slug}`;\n    } else if (isAuth() && isAuth().role === 0) {\n        updateBlogEndpoint = `${API}/api/authuser/blog/${slug}`;\n    }\n\n    return fetch(`${updateBlogEndpoint}`, {\n        method: 'PUT',\n        headers: {\n            Accept: 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: blog\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\n\nexport const listSearch = params => {\n    console.log('search params', params);\n    let query = queryString.stringify(params);\n    console.log('query params', query);\n    return fetch(`${API}/api/blogs/search?${query}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};"]},"metadata":{},"sourceType":"module"}