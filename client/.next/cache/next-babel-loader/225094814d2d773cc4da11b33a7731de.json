{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isAuth } from './auth';\nexport var createBlog = function createBlog(blog, token) {\n  var createBlogEndpoint;\n  console.log(isAuth().role);\n\n  if (isAuth() && isAuth().role === 1) {\n    createBlogEndpoint = \"\".concat(API, \"/api/blog\");\n  } else if (isAuth() && isAuth().role === 0) {\n    createBlogEndpoint = \"\".concat(API, \"/api/authuser/blog\");\n  }\n\n  return fetch(\"\".concat(createBlogEndpoint), {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      Authorization: \"Bearer \".concat(token)\n    },\n    body: blog\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var listBlogsWithCategoriesAndTags = function listBlogsWithCategoriesAndTags(skip, limit) {\n  var data = {\n    skip: skip,\n    limit: limit\n  };\n  return fetch(\"\".concat(API, \"/api/blogs-categories-tags\"), {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json'\n    }\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var singleBlog = function singleBlog(slug) {\n  return fetch(\"\".concat(API, \"/api/blog/\").concat(slug), {\n    method: 'GET'\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var listRelated = function listRelated(blog) {\n  // console.log(blog)\n  return fetch(\"\".concat(API, \"/api/blogs/related\"), {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: _JSON$stringify(blog)\n  }).then(function (response) {\n    // console.log(response.json())\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var list = function list(username) {\n  var listBlogsEndpoint;\n\n  if (username) {\n    listBlogsEndpoint = \"\".concat(API, \"/api/authuser/\").concat(username, \"/blogs\");\n  } else {\n    listBlogsEndpoint = \"\".concat(API, \"/api/blogs\");\n  }\n\n  return fetch(\"\".concat(listBlogsEndpoint), {\n    method: 'GET'\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var removeBlog = function removeBlog(slug, token) {\n  var deleteBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    deleteBlogEndpoint = \"\".concat(API, \"/blog/\").concat(slug);\n  } else if (isAuth() && isAuth().role === 0) {\n    deleteBlogEndpoint = \"\".concat(API, \"/user/blog/\").concat(slug);\n  }\n\n  return fetch(\"\".concat(deleteBlogEndpoint), {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: \"Bearer \".concat(token)\n    }\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var updateBlog = function updateBlog(blog, token, slug) {\n  var updateBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    updateBlogEndpoint = \"\".concat(API, \"/api/blog/\").concat(slug);\n  } else if (isAuth() && isAuth().role === 0) {\n    updateBlogEndpoint = \"\".concat(API, \"/api/authuser/blog/\").concat(slug);\n  }\n\n  return fetch(\"\".concat(updateBlogEndpoint), {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      Authorization: \"Bearer \".concat(token)\n    },\n    body: blog\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var listSearch = function listSearch(params) {\n  console.log('search params', params);\n  var query = queryString.stringify(params);\n  console.log('query params', query);\n  return fetch(\"\".concat(API, \"/api/blogs/search?\").concat(query), {\n    method: 'GET'\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};","map":{"version":3,"sources":["/home/jahnvi/My stuff/SeoBlog/client/actions/blog.js"],"names":["fetch","API","queryString","isAuth","createBlog","blog","token","createBlogEndpoint","console","log","role","method","headers","Accept","Authorization","body","then","response","json","err","listBlogsWithCategoriesAndTags","skip","limit","data","singleBlog","slug","listRelated","list","username","listBlogsEndpoint","removeBlog","deleteBlogEndpoint","updateBlog","updateBlogEndpoint","listSearch","params","query","stringify"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isAuth } from './auth';\nexport const createBlog = (blog, token) => {\n    let createBlogEndpoint;\nconsole.log(isAuth().role)\n    if (isAuth() && isAuth().role === 1) {\n        createBlogEndpoint = `${API}/api/blog`;\n    } else if (isAuth() && isAuth().role === 0) {\n        createBlogEndpoint = `${API}/api/authuser/blog`;\n    }\n\n    return fetch(`${createBlogEndpoint}`, {\n        method: 'POST',\n        headers: {\n          \n            Accept: 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: blog\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\nexport const listBlogsWithCategoriesAndTags = (skip,limit) => {\nvar data={skip,limit}\n    return fetch(`${API}/api/blogs-categories-tags`, {\n        method: 'POST',\n        headers: {\n          \n            \n            Accept: 'application/json',\n        },\n       \n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\nexport const singleBlog = slug => {\n    return fetch(`${API}/api/blog/${slug}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\nexport const listRelated = blog => {\n   // console.log(blog)\n    return fetch(`${API}/api/blogs/related`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(blog)\n    })\n        .then(response => {\n          // console.log(response.json())\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\n\n\n\nexport const list = username => {\n    let listBlogsEndpoint;\n\n    if (username) {\n        listBlogsEndpoint = `${API}/api/authuser/${username}/blogs`;\n    } else {\n        listBlogsEndpoint = `${API}/api/blogs`;\n    }\n\n    return fetch(`${listBlogsEndpoint}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\nexport const removeBlog = (slug, token) => {\n    let deleteBlogEndpoint;\n\n    if (isAuth() && isAuth().role === 1) {\n        deleteBlogEndpoint = `${API}/blog/${slug}`;\n    } else if (isAuth() && isAuth().role === 0) {\n        deleteBlogEndpoint = `${API}/user/blog/${slug}`;\n    }\n\n    return fetch(`${deleteBlogEndpoint}`, {\n        method: 'DELETE',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`\n        }\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\nexport const updateBlog = (blog, token, slug) => {\n    let updateBlogEndpoint;\n\n    if (isAuth() && isAuth().role === 1) {\n        updateBlogEndpoint = `${API}/api/blog/${slug}`;\n    } else if (isAuth() && isAuth().role === 0) {\n        updateBlogEndpoint = `${API}/api/authuser/blog/${slug}`;\n    }\n\n    return fetch(`${updateBlogEndpoint}`, {\n        method: 'PUT',\n        headers: {\n            Accept: 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: blog\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\n\nexport const listSearch = params => {\n    console.log('search params', params);\n    let query = queryString.stringify(params);\n    console.log('query params', query);\n    return fetch(`${API}/api/blogs/search?${query}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};"]},"metadata":{},"sourceType":"module"}